apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'idea'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.1"

    defaultConfig {
        applicationId "com.slashmobility.seleccionnexoandroid"
        minSdkVersion 15
        targetSdkVersion 29

        def code = getVersionCodeAutoincrement()
        versionCode code
        versionName code + ".0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.incremental": "true"]
            }
        }
    }

    androidExtensions {
        experimental = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "IS_DEBUG", "false"
            buildConfigField "String", "API_HOST", project.findProperty("API_HOST_PROD")
            buildConfigField "long", "API_TIMEOUT", project.findProperty("API_TIMEOUT_PROD")

            debuggable false
        }
        debug {
            buildConfigField "boolean", "IS_DEBUG", "true"
            buildConfigField "String", "API_HOST", project.findProperty("API_HOST_DEV")
            buildConfigField "long", "API_TIMEOUT", project.findProperty("API_TIMEOUT_DEV")

            debuggable true
        }
    }

    applicationVariants.all { variant ->
        if (variant.name.contains('release')) {
            variant.outputs.each { output ->
                variant.outputs.all {
                    outputFileName = "PRUEBA_${variant.name}_${variant.versionName}.apk"
                }
            }
        }
        if(variant.name.contains('debug')){
            variant.outputs.each { output ->
                variant.outputs.all {
                    outputFileName = "PRUEBA_${variant.name}_${variant.versionName}.apk"
                }
            }
        }
    }
}

def getVersionCodeAutoincrement(){

    def versionPropsFile = file('version.properties')
    def versionProps

    if (versionPropsFile.canRead()) {
        versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
    }

    def code = versionProps['VERSION_CODE_RELEASE'].toInteger()
    return (int)code
}

dependencies {

    def lifecycle_version = "2.1.0"
    def dagger_version = "2.16"
    def room_version = "2.2.1"
    def retrofit_version = "2.6.0"
    def okhttp3_version = "3.11.0"
    def glide_version = "4.10.0"
    def rxandroid_version = "2.1.1"
    def rxjava_version = "2.1.8"
    def gsonVersion = "2.8.5"
    def androidx_core_version = "1.1.0"
    def androidx_appcompat_version = "1.1.0"
    def androidx_constraintlayout_version = "1.1.3"
    def material_version = "1.2.0-alpha02"
    def fragment_version = "1.2.0-rc02"
    def multidex_version = "2.0.1"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$androidx_appcompat_version"
    implementation "androidx.core:core-ktx:$androidx_core_version"
    implementation "androidx.constraintlayout:constraintlayout:$androidx_constraintlayout_version"

    //Test Implementation
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.19.0'
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation('com.nhaarman:mockito-kotlin-kt1.1:1.5.0', {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    })
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    testImplementation "com.squareup.okhttp3:mockwebserver:4.2.1"

    //Material design
    implementation "com.google.android.material:material:$material_version"

    //Dagger dependency for DI
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    //Retrofit2
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3_version"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$okhttp3_version"

    //RxJava
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'javax.inject:javax.inject:1'

    //ViewModel, Lifecycle and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    //Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"

    //Room
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    //Gson
    implementation "com.google.code.gson:gson:$gsonVersion"

    //Fragment
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation "androidx.fragment:fragment-testing:$fragment_version"

    //Find dagger bugs
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    //Multidex
    implementation "androidx.multidex:multidex:$multidex_version"

}
